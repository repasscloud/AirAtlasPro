@page "/account/settings"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject ISupportTicketService SupportTicketService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@using AirAtlasPro.Models.Account

<PageTitle>@pageTitle</PageTitle>

<h2>@pageTitle</h2>

@if (showLogin)
{
    NavigateToLogin();
}

<EditForm Model="@user" OnValidSubmit="@HandleUpdateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label for="EmailAddress">Email Address</label>
        <InputText id="EmailAddress" @bind-Value="user.EmailAddress" class="form-control" />
        <ValidationMessage For="() => user.EmailAddress" />
    </div>

    <div class="form-group mb-2">
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" @bind-Value="user.FirstName" class="form-control" />
    </div>

    <div class="form-group mb-2">
        <label for="PhoneNumber">Phone Number</label>
        <InputText id="PhoneNumber" @bind-Value="user.PhoneNumber" class="form-control" />
    </div>

    <div class="form-group mb-2">
        <label for="Address1">Address</label>
        <InputText id="Address1" @bind-Value="user.Address1" class="form-control" />
    </div>

    <div class="form-group mb-2">
        <label for="Address2">Address 2</label>
        <InputText id="Address2" @bind-Value="user.Address2" class="form-control" />
    </div>

    <div class="row mb-2">
        <!-- Bootstrap row for three columns -->
        <div class="col-md-4">
            <!-- Each column occupies 1/3 of the width on medium-sized screens and above -->
            <div class="form-group">
                <label for="City">City</label>
                <InputText id="City" @bind-Value="user.City" class="form-control" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="State">State</label>
                <InputText id="State" @bind-Value="user.State" class="form-control" />
            </div>
        </div>
        <!-- Third column for CityPostalCode -->
        <div class="col-md-4">
            <div class="form-group">
                <label for="PostalCode">Postal Code</label>
                <InputText id="PostalCode" @bind-Value="user.PostalCode" class="form-control" />
            </div>
        </div>
    </div>

    <div class="form-group mb-3">
        <label for="Country">Country</label>
        <InputText id="Country" @bind-Value="user.Country" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Update Details</button>

</EditForm>

@code {
    private string pageTitle = "Account Settings";

    private User user = new User();

    private bool showLogin = true;

    private string Username = "Anonymous User";
    private string Picture = string.Empty;
    private bool? hasBillingRole;
    private bool? hasSupportRole;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            Username = state?.User?.Identity?.Name ?? string.Empty;

            Picture = state?.User.Claims
                        .Where(c => c.Type.Equals("picture"))
                        .Select(c => c.Value)
                        .FirstOrDefault() ?? string.Empty;

            hasBillingRole = state?.User.IsInRole("Billing");
            hasSupportRole = state?.User.IsInRole("Support");

            if (!string.IsNullOrEmpty(state?.User?.Identity?.Name))
            {
                showLogin = false;
            }
        }
        await base.OnInitializedAsync();
    }

    // Redirect to login page if not already logged in
    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login?redirectUri=/");
    }

    private void HandleUpdateUser()
    {
        // Handle the submission of the form, e.g., save changes to the user object
        // You can call a service to update the user data or perform any other actions here
    }
}